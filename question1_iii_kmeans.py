# -*- coding: utf-8 -*-
"""Question1_iii_Kmeans.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kpYbtl56wADkxfTVaoXmpGXc0a9BOZ1e
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
# import seaborn as sns
from numpy import linalg as LA

df = pd.read_csv("A2Q1.csv",header=None)
np_df=df.to_numpy()

def k_means(data,k=4,iterations=100,se=1):

  error=[]
  np.random.seed(se)
  assignment_array,clusters=random_cluster_assignment(data,k)
  initial_cluster_means=calculate_cluster_means(clusters)
  error.append(compute_error(clusters,initial_cluster_means))
  prev_assignment= np.array(assignment_array)
  
  for i in range(iterations):
    #print(i)
    next_assignment=[]
    for k in range(len(data)):
      # prev_assignment= np.array(data_and_index)[:,1]
      closest_cluster_idx=closest_cluster(data[k],initial_cluster_means)
      next_assignment.append(closest_cluster_idx)
      updated_clusters=update_clusters_with_data_pt(data[k],closest_cluster_idx,clusters,prev_assignment[k])

      #datapoints[1]=closest_cluster_idx
    
    
    new_cluster_means=calculate_cluster_means(updated_clusters)
    initial_cluster_means=new_cluster_means
    error.append(compute_error(updated_clusters,initial_cluster_means))
    clusters=updated_clusters.copy()
    if np.sum(np.squeeze(prev_assignment) - np.squeeze(np.array(next_assignment))) !=0:
      prev_assignment= np.array(next_assignment)
      continue
    else:
      last_iter=i
      print("Last Iteration =",i)
      break
    

  #plt.figure(i)
  #plt.scatter(data_and_index[:,0][0], data[:,1], c=model.labels_.astype(float))
  return np.array(next_assignment),error,last_iter,new_cluster_means

def update_clusters_with_data_pt(Data_point,assigned_cluster, clusters,prev_assigned_cluster=0):
  #print(prev_assigned_cluster)
  if prev_assigned_cluster==0:
    clusters[assigned_cluster].append(Data_point)

  else:
    C=[]
    for i,data_point in enumerate(clusters[prev_assigned_cluster]):
    # clusters[prev_assigned_cluster].pop(Data_point)
      if (data_point[0] != Data_point[0]) and  (data_point[1] != Data_point[1]):
        C.append(data_point)
    clusters[prev_assigned_cluster]=C
    clusters[assigned_cluster].append(Data_point)
  return clusters

def random_cluster_assignment(input_data,n_clusters=4):
  assignment_array=np.random.randint(1,n_clusters+1,len(input_data))

  clusters={}
  for i in range(1,n_clusters+1):
    clusters[i]=[]
  
  for i in range(len(input_data)):
    clusters=update_clusters_with_data_pt(input_data[i],assignment_array[i], clusters,prev_assigned_cluster=0)

  return np.array(assignment_array),clusters

def calculate_cluster_means(clusters):
  means=[]
  dimension_of_each_data_pt = 50
  for i in clusters.keys():
    if len(clusters[i])!=0:
      m=np.mean(clusters[i],axis=0)
    else:
      m=np.array([0]*dimension_of_each_data_pt)
    means.append(m)
  return np.array(means)

def compute_error(clusters,means):#0,1,2,3
  err=0
  means=calculate_cluster_means(clusters)
  for i in range(len(means)):
    if len(clusters[i+1]) !=0:
      err_cluster_i=np.sum((np.array(clusters[i+1]) - np.array(means[i]))**2)
    else:
      err_cluster_i=0
    err+=err_cluster_i
  return err

def closest_cluster(data_pt,means):
  #a=np.argmin(np.sum(np.array(np.array(data_pt) - np.array(means))**2, axis=1))
  a=[]
  for mean in means:
    a.append(np.sum((np.array(data_pt) - np.array(mean))**2))

  i=np.argmin(np.array(a))
  return i+1 #cluster index

k_assignment,err,last_iter,means=k_means(np_df,4)
plt.figure(figsize=(12,6))
plt.plot(range(1,len(err)+1),err,marker='o')
plt.xlabel("Number of Iterations")
plt.ylabel("Kmeans Error")
plt.title("Kmeans Error Plot")
plt.grid()
plt.show()
print("Cluster means = ",means)