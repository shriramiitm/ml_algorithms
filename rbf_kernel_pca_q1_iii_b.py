# -*- coding: utf-8 -*-
"""RBF_Kernel_PCA_Q1_iii_B.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11ZSAZ5nA9rFRpx_5D-3u47bp6p5sdAjB

Importing Required Libraries
"""

import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.linalg import eigh
import pandas as pd

"""Reading the dataset (Assuming the dataset is uploaded in files.)"""

dataset = pd.read_csv("Dataset.csv", names=['p','q'])
X_dataset=dataset.to_numpy()

"""A function for calculation of pairwise distances between data points. This will take in dataset and then returns distance_matrix"""

def pairwise_dist_matrix(dataset):
  N=dataset.shape[0] #number of datapoints
  
  dist_mat=np.zeros((N,N)) #initialising distance matrix

  for i in range(N):

    array=np.sum((X_dataset[i] - dataset)**2,axis=1)
    dist_mat[:,i]=array

  return dist_mat

"""This is the function for creating the centered RBF(Radial Basis Function) kernel which will be used for Kernel PCA. This takes in pairwise distance matrix and sigma(a tuning parameter) and returns centered kernel matrix."""

def centered_rbf_kernel(pairwise_dist_matrix,sigma):
  
  constant=1/(2.0*sigma**2)
  K=np.exp(np.multiply(-1*constant,pairwise_dist_matrix))

  # Center the kernel matrix.
  N = K.shape[0]
  ones_matrix = np.ones((N, N))
  column_wise_sum = np.dot(ones_matrix, K) / N #ij entry = 1/N * sum of jth column
  row_wise_sum = np.dot(K, ones_matrix) / N #ij entry = 1/N * sum of ith row

  row_wise_sum_of_col_wise_sum = np.dot(column_wise_sum, ones_matrix) / N
  K_centered = K - column_wise_sum - row_wise_sum + row_wise_sum_of_col_wise_sum

  return K_centered

"""This function takes in the kernel matrix and performs its eigen decomposition and returns the dot product of the kernel with the eigen vectors of kernel."""

def rdf_kernel_pca(Kernel,components=2):
  e_vals,e_vecs = eigh(Kernel)
  e_vals,e_vecs  = np.flip(e_vals),np.fliplr(e_vecs)

  #for top two components
  e_vals, e_vecs = e_vals[:components],e_vecs[:,:components]

  pc_data = Kernel.dot(e_vecs)

  return pc_data

"""Plotting the results"""

sigma_=np.arange(0.1,1.1,0.1)
for i in range(len(sigma_)):
  pairwise_distance_matrix=pairwise_dist_matrix(X_dataset)
  centered_kernel = centered_rbf_kernel(pairwise_distance_matrix,sigma_[i])
  pc_data = rdf_kernel_pca(centered_kernel,components=2)
  plt.figure(i)
  sns.scatterplot(x=pc_data[:,0],y=pc_data[:,1]).set(title="Kernel PCA for RBF kernel map with sigma =" + str(sigma_[i]))
  plt.xlabel("Principal Component 1")
  plt.ylabel("Principal Component 2")
  plt.show()

sigma_=np.arange(1.1,2.1,0.1)
for i in range(len(sigma_)):
  pairwise_distance_matrix=pairwise_dist_matrix(X_dataset)
  centered_kernel = centered_rbf_kernel(pairwise_distance_matrix,sigma_[i])
  pc_data = rdf_kernel_pca(centered_kernel,components=2)
  plt.figure(i)
  sns.scatterplot(x=pc_data[:,0],y=pc_data[:,1]).set(title="Kernel PCA for RBF kernel map with sigma =" + str(sigma_[i]))
  plt.xlabel("Principal Component 1")
  plt.ylabel("Principal Component 2")
  plt.show()