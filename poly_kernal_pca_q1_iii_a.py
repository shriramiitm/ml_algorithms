# -*- coding: utf-8 -*-
"""Poly_Kernal_PCA_Q1_iii_A.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zhJs6R6Kybo6PwATKh7IsOmPAWXjzRdg

Importing Required Libraries
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from scipy.linalg import eigh

"""Reading the dataset (Assuming the dataset is uploaded in files.)"""

dataset = pd.read_csv("Dataset.csv", names=['p','q']) #datapoint vectors are x1, x2,...xn and each x1 is of type [p,q].T

X_dataset=dataset.to_numpy()  #here the datapoints are in rows Therefore, x1 = [f1, f2] form

def centered_poly_kernel(X, degree=2):
    
  # Compute the kernel matrix.
  K = (np.dot(X,X.T) + 1)**degree #Data points of X is in row wise, so X is already in transposed form


  # Center the kernel matrix.
  N = K.shape[0]
  ones_matrix = np.ones((N, N))
  column_wise_sum = np.matmul(ones_matrix, K) / N #ij entry = 1/N * sum of jth column
  row_wise_sum = np.matmul(K, ones_matrix) / N #ij entry = 1/N * sum of ith row

  row_wise_sum_of_col_wise_sum = np.matmul(column_wise_sum, ones_matrix) / N
  K_centered = K - column_wise_sum - row_wise_sum + row_wise_sum_of_col_wise_sum

  return K_centered

def poly_kernel_pca(K, components=2):
    
  e_vals, e_vecs = eigh(K)
  
  e_vals, e_vecs = np. flip(e_vals), np.fliplr(e_vecs) #sort in descending order

  PCs = np.column_stack([(e_vecs[:, i]/np.sqrt(e_vals[i])) for i in range(components)]) # Top k normalized eigenvectors

  pc_data = K.dot(PCs)
  return pc_data

#degree 2
degree = 2    
KC = centered_poly_kernel(X_dataset, degree)
pc_vals = poly_kernel_pca(KC)
p=sns.scatterplot(x=pc_vals[:,0],y=pc_vals[:,1]).set(title="Kernel PCA with polynomial of degree=2")
plt.xlabel("Principal Component 1")
plt.ylabel("Principal Component 2")
plt.show()

#degree 3
degree = 3   
KC = get_centered_poly_kernel(X_dataset, degree)
pc_vals = poly_kernel_pca(KC)
p=sns.scatterplot(x=pc_vals[:,0],y=pc_vals[:,1]).set(title="Kernel PCA with polynomial of degree=3")
plt.xlabel("Principal Component 1")
plt.ylabel("Principal Component 2")
plt.show()