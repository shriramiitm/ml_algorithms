# -*- coding: utf-8 -*-
"""Modified_Kmeans_Q2_iv.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pXc2bYR4-oZivWNrY4GttZkIgX-xnL4v
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from scipy.linalg import eigh

dataset = pd.read_csv("Dataset.csv", names=['p','q']) #datapoint vectors are x1, x2,...xn and each x1 is of type [p,q].T
X_dataset=dataset.to_numpy()  #here the datapoints are in rows Therefore, x1 = [f1, f2] form

def get_rbf_kernel(dataset,sigma):
  N=dataset.shape[0] #number of datapoints
  
  dist_mat=np.zeros((N,N)) #initialising distance matrix

  for i in range(N):

    array=np.sum((X_dataset[i] - dataset)**2,axis=1)
    dist_mat[:,i]=array

  constant=1/(2.0*sigma**2)
  K=np.exp(np.multiply(-1*constant,dist_mat))

  return K

def mod_kernel_kmeans(K,num_clusters):
    
  e_vals, e_vecs = eigh(K) 
  e_vals, e_vecs = np. flip(e_vals), np.fliplr(e_vecs) #sort in descending order

  h_star = np.column_stack([e_vecs[:, i] for i in range(num_clusters)]) 

  cluster_assignment=np.argmax(h_star, axis=1) +1

  return  cluster_assignment

def plot_clusters_Using_modified_Spectral_Kmeans(X_dataset): 
  for sigma in range(1,10):
    kernel=get_rbf_kernel(X_dataset,0.1*sigma)
    cluster_assignment=mod_kernel_kmeans(kernel,4)
    plt.figure(sigma)
    sns.scatterplot(x=X_dataset[:,0],y=X_dataset[:,1],hue=cluster_assignment,palette="deep")
    plt.axis('on')
    plt.title("Modified K-Means Clustering with rbf kernel sigma ="+str(0.1*sigma))
    plt.show()

plot_clusters_Using_modified_Spectral_Kmeans(X_dataset)