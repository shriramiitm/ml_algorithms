# -*- coding: utf-8 -*-
"""StandardPCA_Q1_i_and_ii.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13ovZ1qq6hCzYYLqx5jPOXh7sIhlnU2L1

Importing Required Libraries
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

"""Reading the dataset (Assuming the dataset is uploaded in files.)"""

dataset = pd.read_csv("Dataset.csv", names=['p','q']) #datapoint vectors are x1, x2,...xn and each x1 is of type [p,q].T
dataset.head()

sns.scatterplot(data=dataset, x="p", y="q").set(title='Given Dataset')

"""***PCA WITH DATA CENTERING***"""

##DATA CENTERING
dataset_mean_p=1./len(dataset) * (dataset['p']).sum()
dataset_mean_q=1./len(dataset) * (dataset['q']).sum()

print(dataset_mean_p,dataset_mean_q)

centered_dataset=dataset-dataset.mean()
centered_dataset.head()

sns.scatterplot(data=centered_dataset, x="p", y="q").set(title='Centered Dataset')

X_dataset=centered_dataset.to_numpy()  #here the datapoints are in rows but we need them in columns
X=X_dataset.T #As per the X matrix discussed in class. X.shape=(2,1000)

covariance_matrix= np.dot(X,X.T)/len(centered_dataset)

eigen_values, eigen_vectors = np.linalg.eigh(covariance_matrix)
idx = eigen_values.argsort()[::-1]   
eigenValues_sorted = eigen_values[idx]
eigenVectors_sorted = eigen_vectors[:,idx]

sum_eigen_values=np.sum(eigenValues_sorted)
for i in range(len(eigenVectors_sorted)):
  statement = "Variance in the data-set explained by Principal Component"+str(i) 
  print(statement, "=", (eigenValues_sorted[i]/sum_eigen_values)*100,"%")


pc_dataset=np.dot(X_dataset,eigenVectors_sorted)
sns.scatterplot(x=pc_dataset[:,0],y=pc_dataset[:,1]).set(title="Dataset as viewed from Principal Component Axes")

plt.xlabel("Principal Component1")
plt.ylabel("Principal Component2")

"""***PCA WITHOUT DATA CENTERING***"""

X_dataset=dataset.to_numpy()  #here the datapoints are in rows but we need them in columns
X=X_dataset.T #As per the X matrix discussed in class. X.shape=(2,1000)

covariance_matrix= np.dot(X,X.T)/len(dataset)
eigen_values, eigen_vectors = np.linalg.eigh(covariance_matrix)

idx = eigen_values.argsort()[::-1]   
eigenValues_sorted = eigen_values[idx]
eigenVectors_sorted = eigen_vectors[:,idx]

sum_eigen_values=np.sum(eigenValues_sorted)
for i in range(len(eigenVectors_sorted)):
  statement = "Variance in the data-set explained by Principal Component"+str(i) 
  print(statement, "=", (eigenValues_sorted[i]/sum_eigen_values)*100,"%")


pc_dataset=np.dot(X_dataset,eigenVectors_sorted)
sns.scatterplot(x=pc_dataset[:,0],y=pc_dataset[:,1]).set(title="Dataset as viewed from Principal Component Axes")

plt.xlabel("Principal Component1")
plt.ylabel("Principal Component2")
plt.show()